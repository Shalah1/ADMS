TABLES
----------------------------------------------------------
#CUSTOMER
CREATE TABLE customer
(
   C_Id int NOT NULL PRIMARY KEY,
   C_Name varchar(25) NOT NULL,
   C_phone varchar(25) NOT NULL
);

#WAITER
CREATE TABLE WAITER
(
   W_Id int NOT NULL PRIMARY KEY,
   W_Name varchar(25) NOT NULL,
   W_phone varchar(25) NOT NULL,
   W_SALARY  FLOAT NOT NULL,
   W_PASSWORD varchar(25) NOT NULL
);

#ICECREAM
CREATE TABLE ICECREAM
(
   I_Id int NOT NULL PRIMARY KEY,
   I_Name varchar(25) NOT NULL,
   I_PRICE FLOAT NOT NULL,
   I_FLAVOUR varchar(25) NOT NULL
);

#ORDERS
CREATE TABLE ORDERS
(
   Order_Id int NOT NULL PRIMARY KEY,
   Order_quantity int NOT NULL,
   C_ID INT NOT NULL,
   I_ID INT NOT NULL,
   W_ID INT NOT NULL,
   CONSTRAINT FK_WAITER FOREIGN KEY (W_ID) REFERENCES WAITER(W_ID),
   CONSTRAINT FK_CUSTOMER FOREIGN KEY (C_ID) REFERENCES CUSTOMER(C_ID),
   CONSTRAINT FK_ICECREAM FOREIGN KEY (I_ID) REFERENCES ICECREAM(I_ID) 
);

#MANAGER
CREATE TABLE MANAGER
(
   M_Id int NOT NULL PRIMARY KEY,
   M_Name varchar(25) NOT NULL,
   M_phone varchar(25) NOT NULL,
   M_PASSWORD varchar(25) NOT NULL
);

#OWNER
CREATE TABLE OWNER
(
   O_Id int NOT NULL PRIMARY KEY,
   O_Name varchar(25) NOT NULL,
   O_phone varchar(25) NOT NULL,
   O_PASSWORD varchar(25) NOT NULL
);

#CASHIER
CREATE TABLE CASHIER
(
   CA_Id int NOT NULL PRIMARY KEY,
   CA_Name varchar(25) NOT NULL,
   CA_PASSWORD varchar(25) NOT NULL
);

#BILL
CREATE TABLE BILL
(
    B_NUMBER int NOT NULL PRIMARY KEY,
    B_DATETIME DATE NOT NULL,
    B_AMOUNT FLOAT NOT NULL,
    C_ID INT NOT NULL,
    CA_ID INT NOT NULL,
    ORDER_Id INT NOT NULL,
    CONSTRAINT FK_CASHIER FOREIGN KEY (CA_ID) REFERENCES CASHIER(CA_ID),
    CONSTRAINT FK_CUSTOMERS FOREIGN KEY (C_ID) REFERENCES CUSTOMER(C_ID),
    CONSTRAINT FK_ORDERS FOREIGN KEY (Order_Id) REFERENCES ORDERS (Order_Id) 
);
 

SEQUENCES
-----------------------------------------------------------
1.
create sequence sqCustomer
start with 1000
increment by 5
maxvalue 1200
minvalue 1000;

2.
create sequence sqWaiter
start with 1000
increment by 5
maxvalue 1200
minvalue 1000;

3.
create sequence sqICECREAM
start with 1000
increment by 5
maxvalue 1200
minvalue 1000;

4.
create sequence sqORDERS
start with 1000
increment by 5
maxvalue 1200
minvalue 1000;

5.
create sequence sqManager
start with 1000
increment by 5
maxvalue 1200
minvalue 1000

6.
create sequence sqOwner
start with 1000
increment by 5
maxvalue 1200
minvalue 1000;

7.
create sequence sqCashier
start with 1000
increment by 5
maxvalue 1200
minvalue 1000;

8.
create sequence sqBILL
start with 1000
increment by 5
maxvalue 1200
minvalue 1000;


INSERTIONS
------------------------------------------------------------
insert into customer(C_id,C_name,C_phone) values (sqCustomer.nextval, 'Niloy', 01961951934);
insert into  waiter (W_id,W_name,W_phone,W_SALARY,W_PASSWORD) values (sqWaiter.nextval, 'rudroloy', 01961951934, 5000 , 'niloy123')
insert into  ICECREAM (I_ID,I_NAME,I_PRICE,I_FLAVOUR) values (sqICECREAM.nextval,'chockoko',1961,'coholateo');
insert into  ORDERS (Order_id, Order_quantity, C_ID, I_ID, W_ID) values (sqORDERS.nextval, 4, 1000, 1000, 1005);
insert into  MANAGER (M_Id,M_Name,M_Phone,M_PASSWORD) values (sqManager.nextval, 'loy', '01361951934','loy123');
insert into  OWNER (O_Id,O_Name,O_Phone,O_PASSWORD) values (sqOwner.nextval, 'MASHAYEAKH ISLAM', '01861951934','oy123');
insert into  CASHIER (CA_id,CA_name,CA_PASSWORD) values (sqWaiter.nextval, 'Tiash','TIASH123')
insert into  BILL (B_NUMBER,B_DATETIME, B_AMOUNT, C_ID, CA_ID, ORDER_Id) values (sqBILL.nextval, sysdate, 1000, 1000, 1015, 1005);


VIEWS
-----------------------------------------------------------
1.
CREATE VIEW Waiters AS
SELECT W_ID,W_Name,W_PHONE,W_SALARY
FROM WAITER;

2.
CREATE VIEW MANAGERs AS
SELECT M_ID,M_Name,W_PHONE
FROM MANAGER;

3.
CREATE VIEW OWNERs AS
SELECT O_ID,O_Name,O_PHONE
FROM OWNER;

4.
CREATE VIEW CASHIERs AS
SELECT CA_ID,CA_Name
FROM CASHIER;


FUNCTIONS
-----------------------------------------------------------
1. WAITER LOGIN
CREATE OR REPLACE FUNCTION WAITER_LOGIN(ID WAITER.W_ID%TYPE, PASSWORD WAITER.W_PASSWORD%TYPE)
  RETURN BOOLEAN
IS
COUNT_RESULT NUMBER;
BEGIN
 SELECT COUNT(W_ID) INTO COUNT_RESULT FROM WAITER WHERE W_ID = ID AND W_PASSWORD = PASSWORD;
 IF COUNT_RESULT != 0 THEN
  RETURN TRUE;
 ELSE
  RETURN FALSE;
 END IF;
END;

2. MANAGER LOGIN
CREATE OR REPLACE FUNCTION MANAGER_LOGIN(ID MANAGER.M_ID%TYPE, PASSWORD MANAGER.M_PASSWORD%TYPE)
RETURN BOOLEAN
IS
COUNT_M NUMBER;
BEGIN
SELECT COUNT(M_ID) INTO COUNT_M FROM MANAGER WHERE M_ID = ID AND M_PASSWORD = PASSWORD;
IF COUNT_M != 0 THEN
RETURN TRUE;
ELSE
RETURN FALSE;
END IF;
END;

3. OWNER LOGIN
CREATE OR REPLACE FUNCTION OWNER_LOGIN(ID OWNER.O_ID%TYPE, PASSWORD OWNER.O_PASSWORD%TYPE)
RETURN BOOLEAN
IS
COUNT_O NUMBER;
BEGIN
SELECT COUNT(O_ID) INTO COUNT_O FROM OWNER WHERE O_ID = ID AND O_PASSWORD = PASSWORD;
IF COUNT_O != 0 THEN
RETURN TRUE;
ELSE
RETURN FALSE;
END IF; 
END;

4. CASHIER LOGIN
CREATE OR REPLACE FUNCTION CASHIER_LOGIN(ID CASHIER.CA_ID%TYPE, PASSWORD CASHIER.CA_PASSWORD%TYPE)
RETURN BOOLEAN
IS
COUNT_CA NUMBER;
BEGIN
SELECT COUNT(CA_ID) INTO COUNT_CA FROM CASHIER WHERE CA_ID = ID AND CA_PASSWORD = PASSWORD;
IF COUNT_CA != 0 THEN
RETURN TRUE;
ELSE
RETURN FALSE;
END IF; 
END;


PROCEDURES
------------------------------------------------------------
1. ADD CUSTOMER
CREATE OR REPLACE PROCEDURE ADD_CUSTOMER(NAME CUSTOMER.C_NAME%TYPE, PHONE CUSTOMER.C_PHONE%TYPE)
IS
BEGIN
INSERT INTO CUSTOMER(C_ID, C_NAME, C_PHONE) VALUES (sqCustomer.nextval, NAME, PHONE);
END;

2. UPDATE CUSTOMER
CREATE OR REPLACE PROCEDURE UPDATE_CUSTOMER(ID CUSTOMER.C_ID%TYPE, NAME CUSTOMER.C_NAME%TYPE, PHONE CUSTOMER.C_PHONE%TYPE)
IS
BEGIN
UPDATE CUSTOMER SET C_NAME = NAME, C_PHONE = PHONE WHERE C_ID = ID;
END;

3. SEARCH CUSTOMER
CREATE OR REPLACE PROCEDURE SEARCH_CUSTOMER(ID IN CUSTOMER.C_ID%TYPE, NAME OUT CUSTOMER.C_NAME%TYPE, PHONE OUT CUSTOMER.C_PHONE%TYPE)
IS
BEGIN
SELECT C_NAME, C_PHONE INTO NAME, PHONE FROM CUSTOMER WHERE C_ID = ID;
END;

3. ADD WAITER
CREATE OR REPLACE PROCEDURE ADD_WAITER(NAME WAITER.W_NAME%TYPE, PHONE WAITER.W_PHONE%TYPE, SALARY WAITER.W_SALARY%TYPE, PASSWORD WAITER.W_PASSWORD%TYPE)
IS
BEGIN
insert into  waiter (W_id,W_name,W_phone,W_SALARY,W_PASSWORD) values (sqWaiter.nextval, NAME, PHONE, SALARY, PASSWORD);
END;

4.UPDATE WAITER
CREATE OR REPLACE PROCEDURE UPDATE_WAITER(ID WAITER.W_ID%TYPE, NAME WAITER.W_NAME%TYPE, PHONE WAITER.W_PHONE%TYPE, SALARY WAITER.W_SALARY%TYPE, PASSWORD WAITER.W_PASSWORD%TYPE)
IS
BEGIN
UPDATE WAITER SET W_NAME = NAME, W_PHONE = PHONE, W_SALARY = SALARY, W_PASSWORD = PASSWORD;
END;

5. REMOVE WAITER
CREATE OR REPLACE PROCEDURE REMOVE_WAITER(ID WAITER.W_ID%TYPE)
IS
BEGIN
DELETE FROM WAITER WHERE W_ID = ID;
END;

6. SEARCH WAITER
CREATE OR REPLACE PROCEDURE SEARCH_WAITER(ID IN WAITER.W_ID%TYPE, NAME OUT WAITER.W_NAME%TYPE, PHONE OUT WAITER.W_PHONE%TYPE, SALARY OUT WAITER.W_SALARY%TYPE)
IS
BEGIN
SELECT W_NAME, W_PHONE, W_SALARY INTO NAME, PHONE, SALARY FROM WAITER WHERE W_ID = ID;
END;

7. INCREAMENT WAITERS SALARIES
CREATE OR REPLACE PROCEDURE INCREMENT_WAITER_SALARY(PERCENTAGE NUMBER)
IS
CURSOR C1
IS
SELECT W_ID, W_SALARY FROM WAITER;

i NUMBER;
updated_sal WAITER.W_SALARY%TYPE;
BEGIN
 for i in C1 loop
  updated_sal := i.W_SALARY+((PERCENTAGE*i.W_SALARY)/100);
  UPDATE WAITER SET W_SALARY = updated_sal WHERE W_ID = i.W_ID;
 END loop;
END;

8. ADD ICECREAM
CREATE OR REPLACE PROCEDURE ADD_ICECREAM(NAME ICECREAM.I_NAME%TYPE, PRICE ICECREAM.I_PRICE%TYPE, FLAVOUR ICECREAM.I_FLAVOUR%TYPE)
IS
BEGIN
insert into  ICECREAM (I_ID,I_NAME,I_PRICE,I_FLAVOUR) values (sqICECREAM.nextval, NAME, PRICE, FLAVOUR);
END;

9. UPDATE ICECREAM
CREATE OR REPLACE PROCEDURE UPDATE_ICECREAM(ID ICECREAM.I_ID%TYPE, NAME ICECREAM.I_NAME%TYPE, PRICE ICECREAM.I_PRICE%TYPE, FLAVOUR ICECREAM.I_FLAVOUR%TYPE)
IS
BEGIN
UPDATE ICECREAM SET I_NAME = NAME, I_PRICE = PRICE, I_FLAVOUR = FLAVOUR WHERE I_ID = ID;
END;

10. REMOVE ICECREAM
CREATE OR REPLACE PROCEDURE REMOVE_ICECREAM(ID ICECREAM.I_ID%TYPE)
IS
BEGIN
DELETE FROM ICECREAM WHERE I_ID = ID;
END;

11. SEARCH ICECREAM
CREATE OR REPLACE PROCEDURE SEARCH_ICECREAM(ID IN ICECREAM.I_ID%TYPE, NAME OUT ICECREAM.I_NAME%TYPE, PRICE OUT ICECREAM.I_PRICE%TYPE, FLAVOUR OUT ICECREAM.I_FLAVOUR%TYPE)
IS
BEGIN
SELECT I_NAME, I_PRICE, I_FLAVOUR INTO NAME, PRICE, FLAVOUR FROM ICECREAM WHERE I_ID = ID;
END;

12. ADD ORDER
CREATE OR REPLACE PROCEDURE ADD_ORDER(QUANTITY ORDERS.ORDER_QUANTITY%TYPE, CUST_ID ORDERS.C_ID%TYPE, ICE_ID ORDERS.I_ID%TYPE, WAIT_ID ORDERS.W_ID%TYPE)
IS
BEGIN
insert into  ORDERS (Order_id, Order_quantity, C_ID, I_ID, W_ID) values (sqORDERS.nextval, QUANTITY, CUST_ID, ICE_ID, WAIT_ID);
END;

13. SEARCH ORDER
CREATE OR REPLACE PROCEDURE SEARCH_ORDER(ID IN ORDERS.ORDER_ID%TYPE, QUANTITY OUT ORDERS.ORDER_QUANTITY%TYPE, CUST_ID OUT ORDERS.C_ID%TYPE, ICE_ID OUT ORDERS.I_ID%TYPE, WAIT_ID OUT ORDERS.W_ID%TYPE)
IS
BEGIN
SELECT ORDER_QUANTITY, C_ID, I_ID, W_ID INTO QUANTITY, CUST_ID, ICE_ID, WAIT_ID FROM ORDERS WHERE ORDER_ID = ID;
END;

14. ADD MANAGER
CREATE OR REPLACE PROCEDURE ADD_MANAGER(NAME MANAGER.M_NAME%TYPE, PHONE MANAGER.M_PHONE%TYPE, PASSWORD MANAGER.M_PASSWORD%TYPE)
IS
BEGIN
insert into  MANAGER (M_Id, M_Name, M_Phone, M_PASSWORD) values (sqManager.nextval, NAME, PHONE, PASSWORD);
END;

15. UPDATE MANAGER
CREATE OR REPLACE PROCEDURE UPDATE_MANAGER(ID MANAGER.M_ID%TYPE, NAME MANAGER.M_NAME%TYPE, PHONE MANAGER.M_PHONE%TYPE, PASSWORD MANAGER.M_PASSWORD%TYPE)
IS
BEGIN
UPDATE MANAGER SET M_NAME = NAME, M_PHONE = PHONE, M_PASSWORD = PASSWORD WHERE M_ID = ID;
END;

16. REMOVE MANAGER
CREATE OR REPLACE PROCEDURE REMOVE_MANAGER(ID MANAGER.M_ID%TYPE)
IS
BEGIN
DELETE FROM MANAGER WHERE M_ID = ID;
END;

17. SEARCH MANAGER
CREATE OR REPLACE PROCEDURE SEARCH_MANAGER(ID IN MANAGER.M_ID%TYPE, NAME OUT MANAGER.M_NAME%TYPE, PHONE OUT MANAGER.M_PHONE%TYPE)
IS
BEGIN
SELECT M_NAME, M_PHONE INTO NAME, PHONE FROM MANAGER WHERE M_ID = ID;
END;

18. UPDATE OWNER
CREATE OR REPLACE PROCEDURE UPDATE_OWNER(ID OWNER.O_ID%TYPE, NAME OWNER.O_NAME%TYPE, PHONE OWNER.O_PHONE%TYPE, PASSWORD OWNER.O_PASSWORD%TYPE)
IS
BEGIN
UPDATE OWNER SET O_NAME = NAME, O_PHONE = PHONE, O_PASSWORD = PASSWORD WHERE O_ID = ID;
END;

19. ADD CASHIER
CREATE OR REPLACE PROCEDURE ADD_CASHIER(NAME CASHIER.CA_NAME%TYPE, PASSWORD CASHIER.CA_PASSWORD%TYPE)
IS
BEGIN
insert into  CASHIER (CA_id,CA_name,CA_PASSWORD) values (sqWaiter.nextval, NAME, PASSWORD);
END;

20. UPDATE CASHIER
CREATE OR REPLACE PROCEDURE UPDATE_CASHIER(ID CASHIER.CA_ID%TYPE, NAME CASHIER.CA_NAME%TYPE, PASSWORD CASHIER.CA_PASSWORD%TYPE)
IS
BEGIN
UPDATE CASHIER SET CA_NAME = NAME,  CA_PASSWORD = PASSWORD WHERE CA_ID = ID;
END;

21. REMOVE CASHIER
CREATE OR REPLACE PROCEDURE REMOVE_CASHIER(ID CASHIER.CA_ID%TYPE)
IS
BEGIN
DELETE FROM CASHIER WHERE CA_ID = ID;
END;

22. CREATE BILL
CREATE OR REPLACE PROCEDURE CREATE_BILL(CASH_ID BILL.CA_ID%TYPE, ORD_ID BILL.ORDER_ID%TYPE)
IS
AMOUNT BILL.B_AMOUNT%TYPE;
QUANTITY ORDERS.ORDER_QUANTITY%TYPE;
PRICE ICECREAM.I_PRICE%TYPE;
CUST_ID ORDERS.C_ID%TYPE;
BEGIN
SELECT I_PRICE INTO PRICE FROM ICECREAM WHERE I_ID = (SELECT I_ID FROM ORDERS WHERE ORDER_ID = ORD_ID);
SELECT ORDER_QUANTITY INTO QUANTITY FROM ORDERS WHERE ORDER_ID = ORD_ID;
AMOUNT := PRICE*QUANTITY;
SELECT C_ID INTO CUST_ID FROM ORDERS WHERE ORDER_ID = ORD_ID;
insert into  BILL (B_NUMBER,B_DATETIME, B_AMOUNT, C_ID, CA_ID, ORDER_Id) values (sqBILL.nextval, sysdate, AMOUNT, CUST_ID, CASH_ID, ORD_ID);
END;


TRIGGERS
-----------------------------------------------------------
1.
CREATE OR REPLACE TRIGGER CHECK_OPERATION_TIME BEFORE INSERT OR UPDATE OR DELETE ON ORDERS
BEGIN
IF TO_CHAR(SYSDATE, 'HH24') NOT BETWEEN '09' AND '20' THEN
RAISE_APPLICATION_ERROR(-20000, 'SHOP IS NOT IN OPERATION TIME');
END IF;
END;

2.
CREATE OR REPLACE TRIGGER CHECK_ORDER_EXISTS BEFORE INSERT ON BILL FOR EACH ROW
DECLARE
COUNT_O NUMBER;
BEGIN
 SELECT COUNT(ORDER_ID) INTO COUNT_O FROM ORDERS WHERE ORDER_ID = :NEW.ORDER_ID;
 IF COUNT_O <= 0 THEN
  RAISE_APPLICATION_ERROR(-20001, 'ORDER DOESNOT EXISTS');
 END IF;
END;

3.
CREATE OR REPLACE TRIGGER CHECK_ICECREAM_EXISTS BEFORE INSERT ON ORDERS FOR EACH ROW
DECLARE
COUNT_I NUMBER;
BEGIN
 SELECT COUNT(I_ID) INTO COUNT_I FROM ICECREAM WHERE I_ID = :NEW.I_ID;
 IF COUNT_I <= 0 THEN
  RAISE_APPLICATION_ERROR(-20002, 'ORDERED ICECREAM IS NOT AVAILABLE');
 END IF;
END;